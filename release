#!/usr/bin/env sos-runner
#fileformat=SOS1.0

sys.path.append('docs')

[default_0 (Configure website): shared = ['conf', 'binders', 'notebook_files', 'index_files', 'pipeline_files', 'generated_files', 'password', 'status']]
DEFAULT_CONF = {
           '__version__': '0.9.3',
           '__about_commit__': 'https://stephenslab.github.io/ipynb-website/notes.html#Note-about-commit-ids',
           'name': 'A Pet Project',
           'repo': 'http://github.com/vatlab/jnbinder',
           'footer': "&copy 2016-2017 Gao Wang at Stephens Lab, University of Chicago",
           'include_dir': [],
           'exclude_file': [],
           'hide_navbar': [],
           'disqus': None,
           'report_style': False,
           'release_message': None,
           'post_release_actions': None,
           'homepage_label': "Overview",
           'source_label': '<span class="fa fa-github"></span>',
           'theme': 'cosmo',
           'homepage': 'Overview.ipynb',
           'font': "Droid Sans",
           'notebook_toc': True,
           'add_commit_info': True,
           'long_autoindex': True,
           'reverse_autoindex': [],
           'remove_whiteline': False,
           'password_file': None
           }
status = 0
try:
  from jnbinder import compare_versions, update_gitignore
except Exception as e:
  if 'jnbinder' in str(e):
     sos_run('setup-jnbinder')
     status = 1
     stop_if(status, msg = 'Installation complete. Please rerun this script.')
  else:
     raise RuntimeError('{}. You can try `pip install` to install the missing module.'.format(e))
if len(glob.glob('.sos/*')) and os.path.isdir(".git"):
   update_gitignore()
if compare_versions(SOS_VERSION, '0.9.11.2') < 0:
  sos_run("upgrade-sos")
  status = 1
  stop_if(status, msg = 'Upgrade complete. Please rerun this script to load the upgrades.')
#
import yaml
with open('config.yml', 'r') as f:
    conf = yaml.load(f)
conf.update({k:v for k,v in DEFAULT_CONF.items() if k not in conf})
conf['jt_theme'] = conf['theme'] if os.path.isfile(f"docs/css/{conf['theme']}.css") else None
for k in ['include_dir', 'hide_navbar', 'exclude_file', 'reverse_autoindex']:
    conf[k] = [os.path.normpath(x) for x in conf[k]]
for item in conf['include_dir']:
    if os.path.basename(item) in ['css', 'fonts', 'js', 'site_libs', 'docs']:
       status = 1
       stof_if(stats, msg = f'Folder name ``{item}`` conflicts with website library paths. Please use a different name.')
conf['remove_whiteline'] = 1 if conf['remove_whiteline'] else 0
binders = [x for x in conf['include_dir'] if os.path.isdir(x)]
# binders = [x for x in next(os.walk('./'))[1] if x not in conf['exclude_dir'] + ['docs'] and not x.startswith('.')]
notebook_files = sum([[y for y in glob.glob(f"{x}/*.ipynb") if y not in [f"{x}/index.ipynb", f"{x}/_index.ipynb", conf['homepage']] + conf['exclude_file']] for x in binders], [])
index_files = [f'{x}/index.ipynb' if os.path.isfile(f'{x}/index.ipynb') else f'{x}/_index.ipynb' for x in binders if x not in conf['hide_navbar']]
pipeline_files = sum([[y for y in glob.glob(f"{x}/*.sos") if y not in conf['exclude_file']] for x in binders], [])
generated_files = [f'docs/{x}.html' for x in binders if x not in conf['hide_navbar']] + ['docs/index.html'] + ['docs/' + x.replace('.ipynb', '.html') for x in notebook_files] + ['docs/' + x.replace('.sos', '.pipeline.html') for x in pipeline_files] + ['docs/js/docs.js', 'docs/index.tpl'] + [f"docs/{x}.tpl" for x in binders]
if conf['password_file'] is not None and os.path.isfile(conf['password_file']):
   with open(conf['password_file']) as f:
        password = {os.path.abspath(os.path.expanduser(k)): v for k, v in yaml.load(f).items()}
   for key in password:
       if not os.path.isdir(key) and not os.path.isfile(key):
          status = 1
          stop_if(status, msg = f"Cannot find ``{key}``. Please comment out or remove it from ``{conf['password_file']}``")
else:
   password = None

[download-jnbinder: provides = 'jnbinder-master/README.md']
download: decompress = True, dest_file = 'jnbinder-master.zip'
  https://github.com/vatlab/jnbinder/archive/master.zip

[setup-jnbinder]
depends: 'jnbinder-master/README.md'
bash:
  yes | cp -rf jnbinder-master/docs ./
  cp jnbinder-master/config.yml config.default.yml
  rm -rf jnbinder-master*

[upgrade-jnbinder]
# only update jnbinder, not the CSS files
depends: 'jnbinder-master/README.md'
bash:
  cp jnbinder-master/docs/jnbinder.py docs
  cp jnbinder-master/docs/site_libs/jnbinder_password.html docs/site_libs
  cp jnbinder-master/docs/js/* docs/js
  if [ -f release.sos ]; then
     cp jnbinder-master/release ./release.sos
  else
     cp jnbinder-master/release ./
  fi
  rm -rf jnbinder-master*

[upgrade-sos (SoS upgrader)]
# using latest pip release
bash:
  pip install --upgrade --upgrade-strategy only-if-needed --no-cache-dir --user sos sos-notebook sos-bash sos-python

[check-link (Broken link checker)]
depends: executable('linkchecker'), sos_variable('conf')
bash: expand = "${ }"
  linkchecker http://${path(conf['repo']):db}.github.io/${path(conf['repo']):b}

[update-tpl (Jupyter HTML template updater)]
input: None
output: [f"docs/{x}.tpl" for x in binders] + ['docs/index.tpl']
from jnbinder import make_template
make_template(conf, binders, 'docs')

[update-index (Index notebook generator)]
stop_if(len(notebook_files) == 0)
input: notebook_files
output: [binder + '/_index.ipynb' for binder in binders]
from jnbinder import make_index_nb, make_empty_nb
for binder in binders:
  content = make_index_nb(binder, conf['exclude_file'] + [conf['homepage']], conf['long_autoindex'], binder in conf['reverse_autoindex'])
  with open(f'{binder}/_index.ipynb', 'w') as f:
    f.write(content)
if not os.path.isfile(conf['homepage']):
  with open(conf['homepage'], 'w') as f:
    f.write(make_empty_nb(conf['name']))

[update-hp (Index HTML updater)]
depends: sos_step("update-tpl"), sos_step("update-index"), executable('jupyter')
input: dynamic(index_files + [conf['homepage']]), group_by = 1, concurrent = True
output: [f'docs/{x}.html' for x in binders if x not in conf['hide_navbar']] + ['docs/index.html'], group_by = 1
bash: expand = "${ }"
  jupyter nbconvert ${_input:e} --output ${_output:ae} --template docs/index.tpl 2> /dev/null
  # sed -i 's/<div class="prompt input_prompt">In&nbsp;\[[0-9]\]:<\/div>//g' ${_output:e}
  if [[ ${conf['remove_whiteline']} -gt 0 ]]; then
     perl -i -ne 'print if /\S/' ${_output:e}
  fi

python: expand = "${ }"
  password = ${password}
  tmp = '' if password is None or (${_input:adr} not in password and ${_input:ar} not in password) else (password[${_input:adr} if (${_input:adr} in password and not ${_input:ar} in password) else ${_input:ar}])
  if len(tmp) > 0:
     import sys
     sys.path.append('docs')
     from jnbinder import protect_page
     new_page = protect_page(${_output:aer}, ${_output:adr}, 'docs/site_libs/jnbinder_password.html', tmp)
     open(f'docs/{new_page.rsplit(".", 1)[0]}_${_output:db}.sha1', 'w').write(f'{new_page.split("_")[0]}')

[update-nb (Notebook to HTML converter)]
depends: sos_step("update-tpl"), executable('jupyter')
stop_if(len(notebook_files) == 0)
from jnbinder import get_commit_info
nb_info = [get_commit_info(x, conf) for x in notebook_files]
input: notebook_files, group_by = 1, paired_with = ['nb_info'], concurrent = True
output: [f"docs/{x.replace('.ipynb', '.html')}" for x in notebook_files], group_by = 1
bash: expand = "${ }"
  jupyter nbconvert ${_input:e} --output ${_output:ae} --template docs/${_input:d}.tpl 2> /dev/null
  num=`grep -n -Fx '''${conf['footer']}''' ${_output:e} | tail -1 | sed 's/\([0-9]*\).*/\1/'`
  perl -i -lpe 'print "${_nb_info[0]}" if $. == '"$num"'+1' ${_output:e}
  if [[ ${conf['remove_whiteline']} -gt 0 ]]; then
     perl -i -ne 'print if /\S/' ${_output:e}
  fi

python: expand = "${ }"
  password = ${password}
  tmp = '' if password is None or ${_input:ar} not in password else password[${_input:ar}]
  if len(tmp) > 0:
     import sys
     sys.path.append('docs')
     from jnbinder import protect_page
     new_page = protect_page(${_output:aer}, ${_output:adr}, 'docs/site_libs/jnbinder_password.html', tmp)
     open(f'docs/{new_page.rsplit(".", 1)[0]}_${_output:db}.sha1', 'w').write(f'{new_page.split("_")[0]}')

[update-wf (Pipeline to HTML converter)]
stop_if(len(pipeline_files) == 0)
input: pipeline_files, group_by = 1, concurrent = True
output: [f"docs/{x.replace('.sos', '.html')}" for x in pipeline_files], group_by = 1
bash: expand = "${ }"
  sos convert ${_input} ${_output} --style tango --lineno

[update-toc (TOC Javascript updater)]
input: dynamic(notebook_files + index_files)
output: 'docs/js/docs.js'
from jnbinder import get_toc
out = [get_toc(x, conf['exclude_file'] + [conf['homepage']]) for x in binders]
with open(_output, 'w') as f:
  f.write('\n'.join(['\n'.join(x) for x in out]))

[remove-obsolete (Obsolete files remover)]
output: 'docs/MANIFEST'
if os.path.isfile(_output):
  old_files = [x.strip() for x in open(_output).readlines()]
  sha1_files = [f"docs/{item.rsplit('_', 1)[-1][:-5]}/{path(item.rsplit('_', 1)[0]):b}.html" if item.rsplit('_', 1)[-1][:-5] != 'docs' else f"docs/{path(item.rsplit('_', 1)[0]):b}.html" for item in glob.glob('docs/*.sha1')]
  get_output(f"rm -f {paths([x for x in old_files if not x in generated_files + sha1_files])} {paths(glob.glob('docs/*.sha1'))}")
with open(_output, 'w') as f:
  f.write('\n'.join(sorted(generated_files + sha1_files)))

[release-website (gh-pages uploader)]
depends: sos_variable('conf')
stop_if(conf['release_message'] is None)
try:
  get_output(f'''cd docs && git add . && git commit --no-verify -m "{conf['release_message']}" && git push --no-verify''')
  get_output(conf['post_release_actions'])
except:
  pass

[clean]
# remove generated files
depends: 'docs/MANIFEST'
get_output(f"rm -f {paths([x.strip() for x in open('docs/MANIFEST').readlines()])}")

[default_1 (Build website)]
# build ipynb website ...
err_msg1 = '''
No valid path found in `include_dir`!
Please properly set `include_dir` in `config.yml`.
'''
err_msg2 = '''
To properly add notebook version info, all changes made to notebooks must be committed.
Please use `git commit` to commit changes and run this command again. Or you may
set `add_commit_info: False` in `config.yml` if you want to disable this feature.
'''
stop_if(status)
fail_if(len(binders) == 0, msg = err_msg1)
fail_if(os.path.isdir('.git') and 'ipynb' in get_output('git status --untracked-files=no --porcelain') and conf['add_commit_info'], msg = err_msg2)
sos_run('update-hp + update-nb + update-wf + update-toc', conf=conf, binders=binders, notebook_files=notebook_files, index_files=index_files, pipeline_files=pipeline_files, generated_files=generated_files, password = password)
sos_run('remove-obsolete', generated_files=generated_files)
sos_run('release-website')

[default_2]
# remove intermediate files
stop_if(status)
bash: expand = True
  rm -f {paths([binder + '/_index.ipynb' for binder in binders])}